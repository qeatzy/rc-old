# source rc/color/color.sh
# see also .preshellrc

# case $(ps -p $$) in
#     *bash) tmp="${BASH_SOURCE[0]}"; myshell=bash; rtmp="$(realpath $tmp)"; mydir="$(dirname $rtmp)"; # echo old "$tmp" link "$rtmp" parent of old "$(dirname $tmp)";
#     ;; *zsh) myshell=zsh; tmp="${(%):-%x}"; rtmp="${tmp:A}"; mydir="${rtmp:h}"; # echo old "$tmp" link "rtmp" parent of old "${tmp:h}" # $0 fails in ~/.zshrc, https://stackoverflow.com/questions/9901210/bash-source0-equivalent-in-zsh
#     ;; *) echo unknown;;
# esac

# "key, see " bind " inputrc
if [[ "$OSTYPE" == linux-gnu ]]; then setxkbmap -layout us -option ctrl:nocaps &>/dev/null; fi    # change CapsLock to LCtrl
[[ $- == *i* ]] && stty -ixon;
# You will need to do stty -ixon before Ctrl-s will work. â€“ Dennis Williamson Nov 15 '10 at 23:51   http://unix.stackexchange.com/questions/4079/put-history-command-onto-command-line-without-executing-it#comment4618_4086

alias refresh='. ~/.'$myshell'rc' # http://mrzool.cc/writing/sensible-bash/
alias ref=' . ~/.'$myshell'rc' # http://mrzool.cc/writing/sensible-bash/

function settitle() { echo -ne '\e]0;'"${1--bash}"'\a'; }
function      stt() { echo -ne '\e]0;'"${1--bash}"'\a'; }

# "utils
# below are Bourne shell compatible
# dir='/home/qeatzy/pkg/bin'; case ":$PATH:" in *$dir*) ;; *) export PATH="$dir:$PATH" ;; esac
function pathadd() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:$PATH"
    fi
}

# "pager, "less, see " info " help
export PAGER="less"
# All three pager programs, more, less and lv, support passing parameters via separate environment variables. These variables are named LESS, MORE and LV, respectively. 
export LESS="-isRM"
# from http://www.refining-linux.org/archives/3/Configuring-your-console-pager/
export EDITOR=vim

# "text
uniq-basename() { awk -F/ '{if(c[$NF]++==0) l[$NF]=$0; if(c[$NF]==2)print(l[$NF]); if(c[$NF]>1)print;} ' "$@"; }
# "edit, see " vim
alias vi=vim
function vf() { # vim + find
    vim $(find -iname "*$@*" -type f);
}
alias v-='vim -c "set path=$PWD" -c "set bt=nofile" -c "nn q :q<CR>" --cmd "let g:ctrlp_cache_dir=\"~/swo/.cache/ctrlp/v-\"" -'
alias v-d='vim -c "set path=$PWD" -c "set bt=nofile ft=dirvish" -c "nn q :q<CR>" --cmd "let g:dirvish=1" --cmd "let g:ctrlp_cache_dir=\"~/swo/.cache/ctrlp/v-d\"" -'
alias v--='vim -c "set path=$PWD" -c "set bt=nofile" -c "nn q :q<CR>" --cmd "let g:ctrlp_cache_dir=\"~/swo/.cache/ctrlp/v-\"" '
alias vN='vim -i NONE -c "set path+=$PWD" -c "setf text" -c "setl bt=nofile" -c "nnoremap q :q<Enter>" --cmd "let g:loaded_ctrlp = 1"'
alias vNN='vim -N -u NONE -c "set nocp| nn gt <C-^>|nn <C-l> :bn<CR>| nn <C-h> :bp<CR>| nn ; :|cno ; <C-e><C-u><C-h><Esc><Esc><Esc>| nnoremap q :q<Enter>"'
alias vnn=vNN
alias vq='vim -q'
alias npp='d:/programfiles/nppbin/notepad++.exe'
alias vimnoctrlp='vim --cmd "let g:loaded_ctrlp = 1"'

alias vimi='vim -i ~/.tmpiviminfo'
alias v.='vi .' # dirvish instead of netrw or v.='vN .'
alias v.d='vi --cmd "let g:dirvish=1" .' # dirvish instead of netrw or v.='vN .'
# "vim, see also " edit " cpp
# function v* { if (( $# == 0 )); then vi *; else vi *.$1; fi }
function vv { # use vf if maxdepth > 1
    if (( $# == 0 )); then
        # vimnoctrlp *;
        # find -L -maxdepth 1 -type f -exec vim --cmd "let g:loaded_ctrlp = 1" {} +
        find -L -maxdepth 1 -type f -exec vim {} +
    elif (( $# == 2 )); then
        vimnoctrlp *.$1 *.$2;
    else    # use only first arg as extension.
        if [ "${1:0:1}" = "." ]; then
        vimnoctrlp *$1;
        elif [ "${#1}" -le "4" ]; then
        vimnoctrlp *.$1;
        else
        find -L -maxdepth 1 -type f -name "*$1*" -exec vim {} +
        fi
    fi
}
alias v8=vv
alias 'v*'=vv
alias xvi='vimnoctrlp -c "sil argdo %!xxd" -c "sil argdo set bt=nofile"'
# "emacs
alias em='emacsclient -c "$@" -a " vim"'
alias emq='emacs -nw -q'    # terminal capture keystroke 'C-c', fail to exit with 'C-x C-c'. use 'M-x kill-emacs' instead.

alias gt='cd $(git rev-parse --show-toplevel 2>/dev/null || (echo "."; echo "Not within a git repository" >&2))'
# "cd, see " dirs " info
function abspath() { (cd ${1:-.} && pwd); }
alias c-=' cd ~-'
alias -- -=' cd -'  # https://askubuntu.com/questions/146031/bash-alias-alias-name-should-be-a-simple-dash-not-working
alias c.=' cd ..'
alias c..=' cd ../..'
alias c...=' cd ../../..'
# pust this to '~/.bash_profile' to make it global?
# mkdir -p list_of_dir && cd list_of_dir[-1]. currently only first word (contain non-space solely) was used.
function mcd() {  # mkdir -p list_of_dir && cd list_of_dir[-1]. currently only first word (contain non-space solely) was used.
    if [ "$#" -ne 1 ]; then
        echo 'Too many or to few arguments. only one is expected.
        exited.';
		# echo 'Only **one** arg was expected.';
        return 1;
    elif ! cd "$1" &>/dev/null; then
        mkdir -p "$1" && cd "$1";
        # cd $1 &>/dev/null ||
        #     (mkdir -p $1; cd $1);
        # Note that '||' and '&&' in bash are of same precedence.
        # also cd inside '()' never change current directory, since '()' creates subshell.
        # mkdir -p "$1" && cd "$1";
    fi
}


alias dir='dirs -v'
alias dirs='dirs -v'
alias d='dirs -v'
alias pd='pushd'
case $myshell in bash) complete -d pd;; esac
if command -v fasd &>/dev/null; then
    alias fast=fasd
    alias z='fasd z'
fi
alias lfc='find -type f|wc'
function llc() { find |wc; find -type f|wc; }
function llc() { echo $(find |wc) "	" $(find -type f|wc); }
# "dirs, see " cd " unix.scp:/^.dirs/
# " dir, "tree, see "" fn " explorer " find " fd(find)
# bash test if is a directory is git repo. https://stackoverflow.com/questions/2180270/
#     git rev-parse --is-inside-work-tree # works for subdirectories too
#     impl logic of git 'rev-parse'. inside .git dir, 2 folders: objects refs  1 file HEAD. https://stackoverflow.com/a/27452421/3625404
function treev() { tree "$@" |v-; }
# alias findv='find | v-'
function findv() {
    if [[ $- != *i* ]]; then
        find "$@" -type f;
    else
        find "$@" -type f | v- -c 'setf dirvish';
    fi
}
function gitv() {
    if [[ $- != *i* ]]; then
        git ls-files;
    else
        git ls-files | v- -c 'setf dirvish';
    fi
}

# " explorer
alias explorer='cygstart .'  # Open Windows Explorer to the current working directory from Cygwin
alias udiff='vimdiff $HOME/notes/code/git/utility.h utility.h'
# alias vc='vim -i ~/.vim/.viminfoc'    # vc for work/project related
alias vif='vim -i ~/.vim/.viminfof'    # currently fangtian
alias vn='vim -i ~/.vim/.viminfon -c "pu_" -c "set bt=nofile" --cmd "let g:ctrlp_cache_dir=\"~/swo/.cache/ctrlp/vn\"" '     # use vn for general notes
alias vo='vim -i ~/.vim/.viminfoo +" cd ~/tmp"'    # use vo for general notes
# alias vp='vim -i ~/.vim/.viminfop'    # use vp for python
alias vj='vim -i ~/.vim/.viminfoj -S ~/.vim.j.session'    # use vj for java
function vk() { set -o history && set -o histexpand; vim -i ~/.vim/.viminfok $($(history -p !!)); }
# both vk and vkk has a problem, not work for successive ones.
function vkk() { set -o history && set -o histexpand; eval $(history -p !!) |v-; }
alias vb='vim -i ~/.vim/.viminfob'    # use vb for bash
alias vbb='vim -i NONE -c "set path+=$PWD" -c "nnoremap q :q<Enter>" ~/notes/.bashrc'    # use vb for bash
# "java
alias lj='ls *.java'
# alias lc='ls *.class'
alias rmj='rm -f *.class'
# alias vimn='vim -u NONE -N'
alias hs=history
# alias foo='cd /usr; ls; cd -' # no space before/after equal sign.
alias ln='ln -n'
alias lns='ln -s'
alias px='ps x'

# compile C with here-doc, from file:///E:/bks/ndal/C/21st_Century_C_C_Tips_from_the_New_School_[2E,2015][Ben_Klemens](Book4You).pdf
go_libs="-lm"
go_flags="-g -Wall -include /cygdrive/e/notes/allheads.h -O3"
alias go_c="c99 -xc - $go_libs $go_flags"
alias grep-i='grep -i' 
alias mtmux='tmux start-server;sleep 0.3;tmux new-window notes;tmux new-window java;tmux new-window tmp;tmux new-window fmanager;tmux new-window swo;tmux new-window bks;'
# "diff
alias vd=vimdiff
vdd () { vimdiff $1 ../$1; }
vd- () { vimdiff $1 ${OLDPWD}/$1; }
# bdiff diff files in different branch
# "git
alias g-='git checkout -'   # co to alternate branch
alias gb='git branch'
alias gilog='git log'
# alias gls='git ls-tree -r --name-only'      # from Git: 1.List all files in a branch, 2.compare files from different branch  http://stackoverflow.com/a/1910822/3625404
function gls { if (($# == 0)); then name=$(git rev-parse --abbrev-ref HEAD); else name=$1; fi; echo branch $name; git ls-tree -r --name-only $name | grep -v 'util\|ignore\|[mM]akefile\|\.mk'; }
function gll { for branch in adt bi comb dev fc graph lc master math mx of pac str tree trim; do printf "\nbranch $branch \n"; git ls-tree -r --name-only $branch | grep -v 'util\|ignore\|[mM]akefile\|\.mk'; done; }
alias gl='git status'
alias gist='git status'
alias g='git status'
alias gis='git status'
alias gcl='(git status) && make clean'
# alias go='git checkout'   # use function instead, reuse zero arg form to 'git branch'.
# function go {
#     if (($# == 0)); then
#         git branch;
#     else
#         git checkout "$@";
#         return $?
#     fi
# }
# alias gi='git'   # use function instead, reuse zero arg form to 'git log'.
function gi {
    if (($# == 0)); then
        git log;
    else
        git "$@";
        return $?
    fi
}


# "fn, see " fs " tree
# chgext  # change extension
# folder utility
# folder empty create
_FEC() { mkdir -p "$1" && rm -rf "$1"/*; };
_FE() { [ -d "$1" ] && rm -rf "$1"/*; };
_fgitrc_get() { ( cd && rm -rf ~/rc && git clone https://github.com/qeatzy/rc; ) };
_fgitrc_st() { cd ~/rc && git status; };

alias rm='rm -i'
alias rm-f='rm -f'
alias mv='mv -i'
alias cp='cp -i'
function cp- { if (( $# == 0 )); then echo '**one** arg, please.'; else cp ${OLDPWD}/$1 .; fi }

# "ll, see " cd " dirs " info
# alias ll='ls -ahl --color=auto'
# NOTE: if use nested alias such as `alias llld='ls -d */'`, there will be two slash.  https://stackoverflow.com/a/40314363/3625404
_LS_PRINT_OPTION=' --color=auto --show-control-chars'
alias ls='\ls -F --color=auto --show-control-chars'
alias rls='\ls --file-type --color=auto --show-control-chars'
alias l='\ls'
alias lc='\ls --color=auto'
alias ll='ls -ahl'
alias rll='rls -ahl'
alias ls.='ls ..'
alias ld="\ls -d $_LS_PRINT_OPTION */"          # directory
# function ld() { ls -d $_LS_PRINT_OPTION "${1}*/"; }     # todo: '$1./' or "".
alias lda="\ls -d $_LS_PRINT_OPTION .*/ */"     # directory, include hidden ones
alias ldc="\ls -1 -d $_LS_PRINT_OPTION .*/ */"     # directory, in one column
function lf_macro() {   # qeatzy's answer https://unix.stackexchange.com/questions/329994/alias-and-functions
    local CMD=${1:-ls} DIR=${2:-.};
    if [ ${CMD} != ls -a  ${CMD} != ll ]; then return 1; fi
    bash -c "$CMD" '$(find $DIR -maxdepth 1 -type f | cut -c3-)';
}
function lsf() { lf_macro ls "$1"; }
function lf() {	# show all files, no directories
	local DIR="${@:-.}"
	if [ $DIR = "." ]; then
		ll $(find $DIR -maxdepth 1 -type f | cut -c3-);
	fi
}
# alias lf='lf_macro ll'
# alias lf='ll $(find -maxdepth 1 -type f)'
# alias lsf='ls $(find -maxdepth 1 -type f)'
alias l.="\ls -dF $_LS_PRINT_OPTION .[!.]*"
alias l..='ls ..'
alias llt='ll -t |vN -'
# alias llt='ll -t |sed -r "s/(.*) ([^ ]+)$/\2 \1/" |vN -'
alias llh='ll |head'
alias llth='ll -t |head'
alias la='ls -A'
alias rla='rls -A'
alias l-='ls ~-'
alias lld="\ls -ahl $_LS_PRINT_OPTION -d */"       # directory
alias lS='ls -S'
alias llS='ll -S'
alias lls='ll -S'
alias llsh='ll -S|head'
alias llsv='rll -S |v-'
function llv () { rll "$@" |v-; }
alias lsh='ls ~'
alias llh='ll ~'
alias lsv='rls |v-'
alias laf='la ~'
alias lR='ls -R'
# alias cc='clear'

# "du
alias du='\du -h'
alias dus='\du -sh'
alias df='\df -h'

# "perl, see " lang
# alias pd='perldoc'
alias pdv='perldoc -v'
alias pdq='perldoc -q'
alias pdf='perldoc -f'

# "lang, see "" ls
#  " java " python " R

# "java, see "" lang
# if [[ "$OSTYPE" == cygwin && "$PATH" != *"jdk"* ]]; then
#     pathadd "/cygdrive/C/Program Files/Java/jdk1.8.0_171/bin"
# fi

# "python, see "" lang " cygwin
# alias pip='python -m pip'     # bad for venv, could use wrong pip
# alias py=python # alias are expanded statically, while function dynamically
# alias py3=python3
py() { python "$@"; }
py3() { python3 "$@"; }
# alias pip='py -m pip'
# alias ipp='ipython3 --quick --no-banner --no-confirm-exit -c "import numpy as np, pandas as pd; pd.options.display.max_rows = 12; np.set_printoptions(precision=4, suppress=True)" -i'
alias ipp='ipython3 --quick --no-banner --no-confirm-exit -c "import numpy as np; np.set_printoptions(precision=4, suppress=True)" -i'

# "R, see "" lang
if [ -f /usr/bin/R ]; then
    alias R=/usr/bin/R
fi
# if command -v R 2>/dev/null; then
#     alias R="$tmp --quiet"
# fi

# "cpp, see also " lang " edit " git
alias vc='vim -i ~/.vim/.viminfoc *.{hpp,h,cpp}'    
# alias vc='vim -i ~/.vim/.viminfoc *.cpp *.h'    
alias lsc='ls *.{h,cpp}'

# "grep(search,"ack), see " find
if hash ag &>/dev/null; then alias grep=ag; fi
# todo: bag for ag "\b$1\b" ??

# "find, see " grep " dir(tree)
#   " fd(find utils)

alias f1='find -maxdepth 1'
function ff() { if (( $# == 0 )); then printf "usage:\n\t ff arg <==> find | grep 'arg'\n"; else find | grep $@; fi }
function fd1() { find -maxdepth 1 -type d; }
function fd2() { find -maxdepth 2 -type d; }
function fd3() { find -maxdepth 3 -type d; }
alias findd='find -type d'
alias findf='find -type f'    # fails for 'findf *'
# function findf() {
# "fd(find), see " find " tree(dir)
fd() { command fd "$@" | cygpath --ignore --file -; }  # https://github.com/sharkdp/fd/issues/153
fzf() { TERM= command fzf "$@" ; }
# test speed on linux kernel source tree, could write your own version in C.
function cnd() { # count directories' entry. -- or better name ffcnt? 
# https://unix.stackexchange.com/questions/90106/whats-the-most-resource-efficient-way-to-count-how-many-files-are-in-a-director
    # ues rsync instead of find + wc.  `rsync --stats -ax --dry-run . /vvvvvvvv` https://stackoverflow.com/a/34941137/3625404
    # or using c, here is a rust version:  https://github.com/the8472/ffcnt  https://stackoverflow.com/a/41903547/3625404
    # local cnt_total=0;
    declare cnt;    # make `cnt` local
    declare cnt_total=0;
    for d in "$(find -maxdepth 1 -type d)"; do
        if [[ "$d" != . ]]; then
            cnt=$(find "$d" |wc -l);
            # cnt_total=$(( $cnt_total + $cnt ));
            ((cnt_total+=cnt))
            # cnt_total=`expr $cnt_total + $cnt`;
            # cnt_total=$[cnt_total + cnt];
            printf "$d:\t$cnt\n";
        fi;
    done;
    printf "total:\t$cnt_total\n";
}
function cndd() {
    declare cnt;    # make `cnt` local
    declare cnt_total=0;
    for d in "$(find -maxdepth 1 -type d)"; do
        if [[ "$d" != . ]]; then
            cnt=$(find "$d" -type d |wc -l);
            ((cnt_total+=cnt))
            printf "$d:\t$cnt\n";
        fi;
    done;
    printf "total:\t$cnt_total\n";
}
function cndf() {
    declare cnt;    # make `cnt` local
    declare cnt_total=0;
    for d in "$(find -maxdepth 1 -type d)"; do
        if [[ "$d" != . ]]; then
            cnt=$(find "$d" -type f |wc -l);
            ((cnt_total+=cnt))
            printf "$d:\t$cnt\n";
        fi;
    done;
    printf "total:\t$cnt_total\n";
}
function cnda() { find "$@"|wc; }
alias fcnd=cndf
alias dcnd=cndd

function fj {
    # vim -i NONE -c "set path+=$PWD" -c "setf text" -c "setl bt=nofile" -c "nnoremap q :q<Enter>" <(ag "$*") ;
    # vim <(ag "$*") ;
    # cat <(ag "$*") ;
    # ag "$*" | vim -i NONE -c "set path+=$PWD" -c "setf text" -c "setl bt=nofile" -c "nnoremap q :q<Enter>" - ;
    # ag "$*" | vim -i NONE -c "set path+=$PWD" -c "setf text" -c "setl bt=nofile" -c "nnoremap q :q<Enter>" - ;
    # vim - < $(ag "$*")
    echo ag "$*"
}

# "ag
function defag() { # find python definition
    ag '^ *def '"$1";
}
function sdefag() { # find python definition, use Gf_search() in .vimrc
        ag '^ *def '"$1" |sed 's/.*def \(.*\)(.*$/'"\0\\/def \1\\\\>\\/"'/';
}
function sbdefag() { # find python definition, search + word boundary, see sdefag.
    ag '^ *def '"$1"'\b' |sed 's/.*def \(.*\)(.*$/'"\0\\/def \1\\\\>\\/"'/';
}
alias agdef=defag
alias psd=sdefag
function psd() { sdefag "$@"; }     # for non-interactive shell

function llag() {
    ll|ag "$@";
}

function fag() {  # find then ag, ignore some directories and file.
    # find . -not \( -path r -prune \) -not \( -path code -prune \) -iname '*'"$*"'*';      # exclude directories, not work.
    find . -not \( -path ./r -prune \) -not \( -path ./code -prune \) -iname '*'"$*"'*';    # exclude directories.  see " find in lx.scp
    # find|ag "$*";
}
function fag2 {
    find . -maxdepth 2 -iname "$@";
}

function dag() {    # find directory that contain pattern
    find . -not \( -path ./r -prune \) -not \( -path ./code -prune \) -type d -iname '*'"$*"'*';
}

function bag() {
    # also lbag, rbag?
    if (( $# == 1 )) ; then
        ag "\b$1\b";
    elif (( $# < 1 )) ; then
        :
    else
        ag "$*";
    fi
}

# "net, see " ssh
function rrsync() { # reid rsync
    local server='zyq@114.212.190.207:/home/zyq/';
    rsync -a "$1" "${server}$2";
}
_g_unison_comp_word_list=$( for name in $(cd ~/.unison 2>/dev/null && \ls *.prf 2>/dev/null); do echo "${name%.prf}"; done)
_unison() {
    COMPREPLY=($(compgen -W "$_g_unison_comp_word_list" -- "${COMP_WORDS[COMP_CWORD]}"))    # hint from _vim
}
# complete -W "$_g_unison_comp_word_list" _unison # static completion, not useful
alias u=unison
alias ubatch='unison -batch'
alias uignore='unison -ignorearchives'
case $myshell in bash) complete -F _unison unison u ubatch uignore;; esac

# "man
# alias man='\man -P vi\ +"color\ peaksea"\ -c\ "setf\ text"\ -c\ "setl\ bt=nofile"\ -'
# vi +"color peaksea" -c "setf text" -c "setl bt=nofile" -
if [[ $(uname -o) = Cygwin ]]; then
    alias e='cygstart'  # explorer not correctly accept arg
    alias e.='explorer .'
    # alias py=python3.7
    # alias ipython=ipython3.7
# alias R='/cygdrive/d/pkg/dt/R-3.4.3/bin/R.exe --no-save'
export MANPAGER='vim -c "%! col -b" -c "sil file $MAN_PN" -c "set bt=nofile ft=man nomod nolist ignorecase" -c "sil! %s/\d\{1,2\}m//g" -c "sil! /^SYNOPSIS" -'   # https://murukesh.me/2015/08/28/vim-for-man.html
else
export MANPAGER='vim --cmd "let g:loaded_ctrlp = 1" -c "%! col -b" -c "sil file $MAN_PN" -c "set bt=nofile ft=man nomod nolist ignorecase" -'   # https://murukesh.me/2015/08/28/vim-for-man.html
export MANPAGER='bash -c " vim --cmd \"let g:loaded_ctrlp = 1\" -c \"sil file $MAN_PN\" -c \"set bt=nofile ft=man nomod nolist nospell\" </dev/tty <(col -b)"'     # http://vi.stackexchange.com/a/4687/10254
fi
# export MANPAGER='vim   </dev/tty <(col -b)'
function mg { man $1 | grep $2 | less ; } 

# "ssh, see "" net
# master connection
# # in ~/.ssh/config -- ssh client config file
# ControlMaster auto
# ControlPath ~/.ssh/control:%h:%p:%r
# second same (user, port, machine) ssh session will tunneling over existing
#     session and requires no new authentication and is very fast.
# https://unix.stackexchange.com/questions/2857/copy-a-file-back-to-local-system-with-ssh
# http://138.201.155.181/download/book/3165652?token=ff69c694-b7df-44ec-96d9-dda46450ffd2
function dld() { # download in server and copy back to local
server='qeatzy@101.132.158.110'
server_dir='~/_dld'
ssh ${server} << EOF
cd ${server_dir}/.cache &&
wget --content-disposition "$1"
EOF
}

# # export h1='qeatzy@101.132.158.110'
# # alias s1='ssh '"$h1"' -t "tmux a || tmux"'
# s1 () {
#     if [ $# -eq 0 ]; then
#         ssh "$h1";
#     elif [ $# -eq 1 ] && [ "$1" = a ]; then
#         ssh "$h1" -t "tmux a || tmux";
#     else
#         ssh "$h1" -t tmux $@;
#     fi
# }
# if [ -n "$h1" ]; then export ip1="${h1#*@}" u1="${h1%%@*}"; fi

# "apt, "pkg
# hash, type or type -p, command -v or command. https://stackoverflow.com/questions/7522712/how-to-check-if-command-exists-in-a-shell-script
if hash apt-cyg &>/dev/null
then
    alias ai=' apt-cyg install'
    alias ala='apt-cyg listall'
    alias al='apt-cyg list'
    # alias apt='apt-cyg'
    function apt-la { apt-cyg listall ".*${1}.*"; }
    function aptla { apt-cyg listall ".*${1}.*"; }
    function apt-l { apt-cyg list ".*${1}.*"; }
    function aptl { apt-cyg list ".*${1}.*"; }
    function apt { apt-cyg "$@"; }
    alias asa='apt-cyg searchall'
elif hash pacman &>/dev/null; then
    alias ai=' sudo pacman -S';
    alias pc=pacman
    alias apt=pacman
    alias s='pacman -Ss'
elif hash apt-get &>/dev/null; then
    alias ai=' sudo apt-get install';
    alias as=' apt-cache search';
    function sno() { apt-cache search --names-only "$@" |v-- -c 'sort' -c 'nn <buffer> <F8> :!sudo apt-get install <cWORD><CR>' -; }
    function ss() { apt-cache search "$@" |v-- -c 'sort' -; }
    function show() {
        outfile=~/.vim/.tmphelp
        if apt-cache show "$@" > $outfile && [ $(wc -l $outfile |cut -d" " -f1) -gt 2 ] ; then     # second test for virtual package, eg ctags
            :;
        else
            apt-cache search --names-only "$@" > $outfile;
        fi
        if [[ $- != *i* ]]; then 
            cat $outfile;
        else
            cat $outfile | v-;
        fi
    }
fi

hash vim ps >/dev/null 2>&1

function v() {
# finished: add apt package search if not command, eg, libc6
if (( $# == 0 )); then
    echo "error: too few arguments. 1 is expected.";
    return 1;
elif (( $# == 1 )); then
    # if "$@" --version 2>/dev/null || "$@" -version 2>/dev/null; then
    if "$@" --version || "$@" -version; then        # eg, python
        # echo version info retrieved successfully.;
        :
    else
        apt-cache show "$@" | grep "^Package|^Version";
        # echo COMMAND FAILED. version info not found.;
        # return 2;
    fi
else
    echo "error: too many arguments. 1 is expected.";
    return 3;
fi
}

alias sane=' stty sane'

# "help, "man, see " info
alias ha='help -d' # hd conflict on ubuntu, change to ha.
alias w='whatis'
alias a='apropos'
alias less='less -Mi'
alias le='less'
alias lps='ps aux |less'
# alias info='info --vi-keys'   # use ~/.infokey rc/.infokey instead
alias cm='cppman'
alias f.='nautilus . &'

# "info, see " ll " ed " help
alias wh='command -v'   # use shell builtin hash, command -v, type -P. not external command which.
function wh() { command -v "$@"; }
function h() { "$*" --help || "$*" -h || help "$*"; }
case $myshell in bash)
# pe () { printenv ${1^^} }
pe () { str="${1^^}"; echo "${!str}"; }
;; zsh) pe () { echo "${(P)${1:u}}"; } ;; esac  # https://unix.stackexchange.com/questions/68035/foo-and-zsh
alias str=strings
# check for script directory, and running shell
# ps -p $$
#
# case $(ps -p $$) in
#     *bash) tmp="${BASH_SOURCE[0]}"; rtmp="$(realpath $tmp)"; mydir="$(dirname $rtmp)"; # echo old "$tmp" link "$rtmp" parent of old "$(dirname $tmp)";
#     ;; *zsh) tmp="${(%):-%x}"; rtmp="${tmp:A}"; mydir="${rtmp:h}"; # echo old "$tmp" link "rtmp" parent of old "${tmp:h}" # $0 fails in ~/.zshrc, https://stackoverflow.com/questions/9901210/bash-source0-equivalent-in-zsh
#     ;; *) echo unknown;;
# esac
# echo mydir "$mydir"
# # https://stackoverflow.com/questions/9901210/bash-source0-equivalent-in-zsh/23259585#23259585
# # https://unix.stackexchange.com/questions/76505/portable-way-to-get-scripts-absolute-path
# # https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
# # https://stackoverflow.com/questions/29832037/how-to-get-script-directory-in-posix-sh
#
# # checking env var (eg, $BASH) solution fails, if your login shell is bash and you start zsh from it.
# # $0 will print script-file's name, instead of shell.
# # another reliable but not universal solution is `cat /proc/$$/cmdline`
# cat /proc/$$/cmdline    # name of command
# echo ' $0' $0 version $BASH_VERSION $ZSH_VERSION
# # https://stackoverflow.com/questions/3327013/how-to-determine-the-current-shell-im-working-on
# # https://stackoverflow.com/questions/3199893/howto-detect-bash-from-shell-script
# # https://stackoverflow.com/questions/9910966/how-to-tell-if-its-using-zsh-or-bash
# # vim:ft=sh:
# # .indp_shellrc
